#!/bin/bash

echo "**********************************************************************************************"
echo "* -------------- PREPARATION OF THE ENVIRONMENT VARIABLES FOR CROSS COMPILING -------------- *"
echo "* Cross compiling the driver source requires deeper knowledge of the driver's build process. *"
echo "* For more information refer to the driver's manual (cifX Linux Driver)                      *"
echo "**********************************************************************************************"
echo ""
echo "Enter the command of the gcc cross compiler (this may include target specific options):"
echo "Variable: CC"
echo " default: ''"
read CCTMP
if [ "${CCTMP}" != "" ]; then
  declare -x CC="${CCTMP}"
else
  if [ -z "${CC}" ]; then
    echo "Aborting preparation - do not skip this configuration!"
    exit
  fi
fi
echo "Enter the command of the g++ cross compiler (this may include target specific options):"
echo "NOTE: This is optional and only required for some example applications!"
echo "Variable: CXX"
read CXXTMP
if [ "${CXXTMP}" != "" ]; then
  declare -x CXX="${CXXTMP}"
fi
echo "Enter the name of the build machine (see configure option: --build):"
echo "Variable: CIFX_BUILD_MACHINE"
echo " default: 'gcc -dumpmachine'"
read CIFX_BUILD_MACHINETMP
if [ "${CIFX_BUILD_MACHINETMP}" != "" ]; then
  declare -x CIFX_BUILD_MACHINE="${CIFX_BUILD_MACHINETMP}"
fi
echo "Enter the name of the host (target) machine (see configure option: --host):"
echo "Variable: CIFX_HOST_MACHINE"
echo " default: '\$(/bin/bash -c \"\$CC -dumpmachine\")'"
read CIFX_HOST_MACHINETMP
if [ "${CIFX_HOST_MACHINETMP}" != "" ]; then
  declare -x CIFX_HOST_MACHINE="${CIFX_HOST_MACHINETMP}"
else
  if [ -z "${CIFX_HOST_MACHINE}" ]; then
    CIFX_HOST_MACHINETMP=$(/bin/bash -c "$CC -dumpmachine")
    declare -x CIFX_HOST_MACHINE="${CIFX_HOST_MACHINETMP}"
  fi
fi
echo "Enter the path to the pciaccess library (libpciaccess):"
echo "NOTE: This is optional if pci support will be disabled (--disable-pci) in cifx driver!"
echo "Variable: PATH_TO_LIBPCIACCESS"
echo " default: ''"
read PATH_TO_LIBPCIACCESSTMP
if [ "${PATH_TO_LIBPCIACCESSTMP}" != "" ]; then
  declare -x PATH_TO_LIBPCIACCESS="${PATH_TO_LIBPCIACCESSTMP}"
fi
echo "Enter the path to the pciaccess header:"
echo "NOTE: This is optional if pci support will be disabled (--disable-pci) in cifx driver!"
echo "      Multiple paths can be separated by comma."
echo "Variable: PATH_TO_INCPCIACCESS"
echo " default: ''"
read PATH_TO_INCPCIACCESSTMP
if [ "${PATH_TO_INCPCIACCESSTMP}" != "" ]; then
  declare -x PATH_TO_INCPCIACCESS="${PATH_TO_INCPCIACCESSTMP}"
fi
echo "Enter the path where the cifx library will be copied to after build:"
echo "NOTE: In the default configuration this can be skipped!"
echo "Variable: PATH_TO_LIBCIFX"
echo " default: ''"
read PATH_TO_LIBCIFXTMP
if [ "${PATH_TO_LIBCIFXTMP}" != "" ]; then
  declare -x PATH_TO_LIBCIFX="${PATH_TO_LIBCIFXTMP}"
fi
echo "Enter the path to the cifx library header:"
echo "NOTE: In the default configuration this can be skipped!"
echo "      Multiple paths can be separated by comma."
echo "Variable: PATH_TO_INCCIFX"
echo " default: ''"
read PATH_TO_INCCIFXTMP
if [ "${PATH_TO_INCCIFXTMP}" != "" ]; then
  declare -x PATH_TO_INCCIFX="${PATH_TO_INCCIFXTMP}"
fi

echo "Now, the driver and the example applications can be built:"
echo "1. Enter the libcifx directory, run './cross_build_driver' and 'make'"
echo "2. Enter the uio_netx directory, run 'make KDIR=[path to the kernel source]'"
echo "3. Enter example application directory, run './cross_build_driver' and 'make'"
echo "4. Copy the binaries to the target and install the resources like it is noted in"
echo "   the cifX Linux Driver Manual."

