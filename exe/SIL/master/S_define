/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "Tvc.hh"
##include "Propulsion.hh"
##include "Aerodynamics.hh"
##include "Time_management.hh"
##include "GPS_constellation.hh"
##include "Rocket_Flight_DM.hh"
##include "EarthEnvironment.hh"
##include "Vehicle.hh"
##include "Module.hh"

##include "env/atmosphere.hh"
##include "env/atmosphere_nasa2002.hh"
##include "env/atmosphere76.hh"
##include "env/atmosphere_weatherdeck.hh"

##include "env/wind.hh"
##include "env/wind_no.hh"
##include "env/wind_tabular.hh"
##include "env/wind_constant.hh"

##include "gyro/gyro.hh"
##include "gyro/gyro_ideal.hh"
##include "gyro/gyro_rocket6g.hh"

##include "accel/accelerometer.hh"
##include "accel/accelerometer_ideal.hh"
##include "accel/accelerometer_rocket6g.hh"
##include "sdt/SDT_NONIDEAL.hh"
##include "sdt/SDT_IDEAL.hh"
##include "sdt/SDT.hh"

##include "time_utility.hh"

##include "Dataflow_Binding.hh"
##include "DM_FSW_Interface.hh"
##include "flight_events_define.h"
##include "nxbus_engine.h"

class Rocket_SimObject : public Trick::SimObject {
    public:
        double int_step = 0.005;
        double stand_still_time = 0.0;
        Rocket_Flight_DM dynamics;
        EarthEnvironment env;
        AeroDynamics aerodynamics;
        Propulsion propulsion;
        Gyro *gyro;
        Accelerometer *accelerometer;
        SDT *sdt;
        TVC tvc;
        Data_exchang data_exchang;

        time_management *time = time_management::get_instance();
        GPS_constellation gps_con;

        refactor_uplink_packet_t dm_ins_db;
        refactor_downlink_packet_t ctl_tvc_db;
        DM_SAVE_decl();

        struct icf_ctrlblk_t   icf_ctrl;
        uint64_t egse_flight_event_handler_bitmap = 0xFFFFFFFFFFFFFFFF;
        uint64_t flight_event_code_record = 0;

        void link(){
            tvc.grab_theta_a_cmd       = GRAB_VAR(ctl_tvc_db.theta_a_cmd);
            tvc.grab_theta_b_cmd       = GRAB_VAR(ctl_tvc_db.theta_b_cmd);
            tvc.grab_theta_c_cmd       = GRAB_VAR(ctl_tvc_db.theta_c_cmd);
            tvc.grab_theta_d_cmd       = GRAB_VAR(ctl_tvc_db.theta_d_cmd);
        };

        void egse_uplink_packet_transfer(struct icf_ctrlblk_t *C) {
            icf_tx_direct(C, EGSE_FLIGHT_COMPUTER_SW_QIDX, &dm_ins_db, sizeof(refactor_uplink_packet_t));
        };

        void load_input(struct icf_ctrlblk_t* C) {
            if (icf_rx_dequeue(C, EGSE_SIL_DOWNLINK_SW_QIDX, &ctl_tvc_db, sizeof(refactor_downlink_packet_t)) > 0) {
                debug_hex_dump("egse", (uint8_t *)&ctl_tvc_db, sizeof(refactor_downlink_packet_t));
                flight_event_code_record = ctl_tvc_db.flight_event_code;
            }
        }

        Rocket_SimObject() 
            :   env         ( data_exchang ) ,
                propulsion  ( data_exchang ) ,
                aerodynamics( propulsion, data_exchang ) ,
                tvc         ( data_exchang ) ,
                gps_con     (  ),
                dynamics    ( data_exchang )
            {

            ("initialization") link();
            ("initialization") sdt->init();
            ("initialization") aerodynamics.init();
            ("initialization") propulsion.init();
            ("initialization") env.init();
            ("initialization") dynamics.init();
            ("initialization") tvc.init();
            ("initialization") gyro->init();
            ("initialization") accelerometer->init();
            ("initialization") icf_ctrlblk_init(&icf_ctrl, ICF_SYSTEM_TYPE_SIL_EGSE);

            P1 (int_step, "scheduled") time->dm_time(int_step);
	        P1 (int_step, "scheduled") env.algorithm(int_step);
            P1 (int_step, "scheduled") propulsion.algorithm(int_step);
            P1 (int_step, "scheduled") aerodynamics.algorithm(int_step);
            P1 (0.005, "scheduled") gyro->algorithm(0.005);
            P1 (0.005, "scheduled") accelerometer->algorithm(0.005);
            P1 (0.005, "scheduled") sdt->algorithm(0.005);

            P2 (0.05, "scheduled") DM_SaveOutData(dm_ins_db);
            P2 (0.05, "scheduled") egse_uplink_packet_transfer(&icf_ctrl);
            P2 (0.05, "scheduled") icf_rx_ctrl_job(&icf_ctrl, HW_PORT8, sizeof(refactor_downlink_packet_t));
            P2 (0.05, "scheduled") load_input(&icf_ctrl);

            P3 (int_step, "scheduled") tvc.algorithm(int_step);
            P3 (int_step, "scheduled") dynamics.algorithm(int_step);
            (5, "scheduled") icf_heartbeat();
            ("shutdown") icf_ctrlblk_deinit(&icf_ctrl, ICF_SYSTEM_TYPE_SIL_EGSE);
        }
};

Rocket_SimObject rkt;

void create_connections() {
}

